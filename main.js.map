{"version":3,"file":"main.js","mappings":"mBAWA,MAAMA,EAAkB,ICTxB,oBACS,KAAAC,QAAoB,CACzB,oBACA,OACA,OACA,UA6BJ,CA1BEC,SAEE,MAAMC,EAAgB,qDAEZC,KAAKC,UAAUD,KAAKH,sCAG9B,OAAOK,QAAQC,QAAQJ,EACzB,CAEAK,eAEE,OAAOF,QAAQC,SACjB,CAEAF,UAAUJ,GACR,OAAOA,EAAQQ,QAAO,CAACC,EAAKC,IAMnBD,EALM,6DAEEC,kBACTA,kBAGL,GACL,GDtBIC,EAAW,IEVjB,MAEEV,SAIE,OAAOI,QAAQC,QAHO,iCAIxB,CAEAC,eACE,OAAOF,QAAQC,SACjB,GFAIM,EAAe,IGXrB,MAEIX,SAKI,OAAOI,QAAQC,QAJO,gFAK1B,CAEAC,eACI,OAAOF,QAAQC,SACnB,GHCEO,EAAS,IAAIC,IAA0B,CACzC,CAAC,IAAKH,GACN,CAAC,KAAMC,KAGLG,EAAS,KAA2B,O,OAAD,E,OAAA,E,EAAA,YAErC,MAAMC,EAAOC,SAASC,cAAc,QAC9BC,EAASF,SAASG,cAAc,UAChCC,EAAUJ,SAASG,cAAc,QAEjCE,EAAUL,SAASG,cAAc,OACvCE,EAAQC,UAAUC,IAAI,WACtBR,EAAKS,OAAOH,GACZA,EAAQG,OAAON,EAAQE,GAGvBF,EAAOO,gBAAkB3B,EAAgBE,eACnCF,EAAgBQ,eAGtB,IAAIoB,EI1Ba,MAEb,IACIC,GADMC,SAASC,KAAKC,MAAM,GAAGC,eAAiB,KACtCC,MAAM,KACdN,EAAmB,CACnBO,SAAU,KACVC,GAAI,KACJC,KAAM,MAOV,OAJAT,EAAQO,SAAWN,EAAE,GACrBD,EAAQQ,GAAKP,EAAE,GACfD,EAAQS,KAAOR,EAAE,GAEVD,CAAO,EJYJU,GAGVC,GAAaX,EAAQO,SAAW,IAAMP,EAAQO,SAAW,MAAQP,EAAQQ,GAAK,OAAS,KAAOR,EAAQS,KAAO,IAAMT,EAAQS,KAAO,IAIlIG,EAAO1B,EAAO2B,IAAIF,GAAazB,EAAO4B,IAAIH,GAAa1B,EAE3DS,EAAQK,gBAAkBa,EAAKtC,eACzBsC,EAAKhC,cACf,E,YA3ByC,K,6QA2BxC,EAGDmC,OAAOC,iBAAiB,aAAc5B,GAGtC2B,OAAOC,iBAAiB,OAAQ5B,GAGhC6B,QAAQC,K","sources":["webpack://gem-puzzle/./src/index.ts","webpack://gem-puzzle/./src/view/components/header/header.ts","webpack://gem-puzzle/./src/view/pages/main/main.ts","webpack://gem-puzzle/./src/view/pages/not-found/not-found.ts","webpack://gem-puzzle/./src/services/utils/Utils.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport './assets/style/style.scss';\r\n\r\nimport { PageRenderer } from './model/page-renderer.model';\r\nimport { Header } from './view/components/header/header';\r\nimport { Main } from './view/pages/main/main';\r\nimport { NotFound } from './view/pages/not-found/not-found';\r\n\r\nimport { Utils } from './services/utils/Utils';\r\n\r\nconst headerComponent = new Header();\r\nconst mainPage = new Main();\r\nconst notFoundPage = new NotFound();\r\n\r\nconst routes = new Map<string, PageRenderer>([\r\n    ['/', mainPage],\r\n    ['**', notFoundPage],\r\n]);\r\n\r\nconst router = async (): Promise<void> => {\r\n    // Lazy load view element:\r\n    const body = document.querySelector('body');\r\n    const header = document.createElement('header');\r\n    const content = document.createElement('main');\r\n    //создаем страничку\r\n    const wrapper = document.createElement('div');\r\n    wrapper.classList.add('wrapper');\r\n    body.append(wrapper);\r\n    wrapper.append(header, content);\r\n\r\n    // Render the Header and footer of the page\r\n    header.innerHTML = await headerComponent.render();\r\n    await headerComponent.after_render();;\r\n\r\n    // Get the parsed URl from the addressbar\r\n    let request = Utils.parseRequestURL();\r\n\r\n    // Parse the URL and if it has an id part, change it with the string \":id\"\r\n    let parsedURL = (request.resource ? '/' + request.resource : '/') + (request.id ? '/:id' : '') + (request.verb ? '/' + request.verb : '');\r\n\r\n    // Get the page from our hash of supported routes.\r\n    // If the parsed URL is not in our list of supported routes, select the 404 page instead\r\n    let page = routes.has(parsedURL) ? routes.get(parsedURL) : notFoundPage;\r\n\r\n    content.innerHTML = await page.render();\r\n    await page.after_render();\r\n}\r\n\r\n// Listen on hash change:\r\nwindow.addEventListener('hashchange', router);\r\n\r\n// Listen on page load:\r\nwindow.addEventListener('load', router);\r\n\r\n//Самооценка\r\nconsole.log();","import { PageRenderer } from '../../../model/page-renderer.model';\r\n\r\nclass Header implements PageRenderer {\r\n  public navList: string[] = [\r\n    'shuffle and start',\r\n    'stop',\r\n    'save',\r\n    'results',\r\n  ];\r\n\r\n  render(): Promise<string> {\r\n\r\n    const view =  /*html*/`\r\n          <ul class=\"header-list\">\r\n            ${this.createNav(this.navList)}\r\n          </ul>\r\n        `\r\n    return Promise.resolve(view);\r\n  }\r\n\r\n  after_render(): Promise<void> {\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  createNav(navList: string[]): string {\r\n    return navList.reduce((nav, item) => {\r\n      const vuew = `\r\n      <li class=\"header-list__item\"\r\n        data-type=\"${item}\">\r\n          ${item}\r\n      </li>`;\r\n      return nav + vuew;\r\n    }, ``);\r\n  }\r\n\r\n}\r\n\r\nexport { Header };","import { PageRenderer } from '../../../model/page-renderer.model';\r\n\r\nclass Main implements PageRenderer {\r\n\r\n  render(): Promise<string> {\r\n    const view =  /*html*/`\r\n    <h1>Main Work</h1>\r\n    `;\r\n    return Promise.resolve(view);\r\n  }\r\n\r\n  after_render(): Promise<void> {\r\n    return Promise.resolve();\r\n  }\r\n}\r\n\r\nexport { Main };","import { PageRenderer } from '../../../model/page-renderer.model';\r\n\r\nclass NotFound implements PageRenderer {\r\n    \r\n    render(): Promise<string> {\r\n        const view =  /*html*/`\r\n        <h3 class=\"page-name\"></h3>\r\n        <p>In process...</p>\r\n        `\r\n        return Promise.resolve(view);\r\n    }\r\n\r\n    after_render(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nexport { NotFound };","type Request = {\r\n    resource: string | null;\r\n    id: string | null;\r\n    verb: string | null;\r\n}\r\n\r\nconst Utils = {\r\n    // --------------------------------\r\n    //  Parse a url and break it into resource, id and verb\r\n    // --------------------------------\r\n    parseRequestURL: (): Request => {\r\n\r\n        let url = location.hash.slice(1).toLowerCase() || '/';\r\n        let r = url.split(\"/\")\r\n        let request: Request = {\r\n            resource: null,\r\n            id: null,\r\n            verb: null\r\n        }\r\n\r\n        request.resource = r[1];\r\n        request.id = r[2];\r\n        request.verb = r[3];;\r\n   \r\n        return request;\r\n    }\r\n\r\n    // --------------------------------\r\n    //  Simple sleep implementation\r\n    // --------------------------------\r\n    , sleep: (ms: number): number | PromiseLike<number> => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}\r\n\r\nexport { Utils };"],"names":["headerComponent","navList","render","view","this","createNav","Promise","resolve","after_render","reduce","nav","item","mainPage","notFoundPage","routes","Map","router","body","document","querySelector","header","createElement","content","wrapper","classList","add","append","innerHTML","request","r","location","hash","slice","toLowerCase","split","resource","id","verb","Utils","parsedURL","page","has","get","window","addEventListener","console","log"],"sourceRoot":""}