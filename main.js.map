{"version":3,"file":"main.js","mappings":"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","sources":["webpack://gem-puzzle/./src/index.ts","webpack://gem-puzzle/./src/view/components/header/header.ts","webpack://gem-puzzle/./src/view/pages/main/main.ts","webpack://gem-puzzle/./src/services/timer.ts","webpack://gem-puzzle/./src/view/pages/not-found/not-found.ts","webpack://gem-puzzle/./src/services/utils/Utils.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport './assets/style/style.scss';\r\n\r\nimport { PageRenderer } from './model/page-renderer.model';\r\nimport { Header } from './view/components/header/header';\r\nimport { Main } from './view/pages/main/main';\r\nimport { NotFound } from './view/pages/not-found/not-found';\r\n\r\nimport { Utils } from './services/utils/Utils';\r\n\r\nconst headerComponent = new Header();\r\nconst mainPage = new Main();\r\nconst notFoundPage = new NotFound();\r\n\r\nconst routes = new Map<string, PageRenderer>([\r\n    ['/', mainPage],\r\n    ['**', notFoundPage],\r\n]);\r\n\r\nconst router = async (): Promise<void> => {\r\n    // Lazy load view element:\r\n    const body = document.querySelector('body');\r\n    const header = document.createElement('header');\r\n    const content = document.createElement('main');\r\n    //создаем страничку\r\n    const wrapper = document.createElement('div');\r\n    wrapper.classList.add('wrapper');\r\n    body.append(wrapper);\r\n    wrapper.append(header, content);\r\n\r\n    // Render the Header and footer of the page\r\n    header.innerHTML = await headerComponent.render();\r\n    await headerComponent.after_render();;\r\n\r\n    // Get the parsed URl from the addressbar\r\n    let request = Utils.parseRequestURL();\r\n\r\n    // Parse the URL and if it has an id part, change it with the string \":id\"\r\n    let parsedURL = (request.resource ? '/' + request.resource : '/') + (request.id ? '/:id' : '') + (request.verb ? '/' + request.verb : '');\r\n\r\n    // Get the page from our hash of supported routes.\r\n    // If the parsed URL is not in our list of supported routes, select the 404 page instead\r\n    let page = routes.has(parsedURL) ? routes.get(parsedURL) : notFoundPage;\r\n\r\n    content.innerHTML = await page.render();\r\n    await page.after_render();\r\n}\r\n\r\n// Listen on hash change:\r\nwindow.addEventListener('hashchange', router);\r\n\r\n// Listen on page load:\r\nwindow.addEventListener('load', router);\r\n\r\n//слушаем ширину окна и изменяем канвас под нее\r\nwindow.addEventListener('resize', () => mainPage.windowOnResize());\r\n\r\n//Самооценка\r\nconsole.log();","import { PageRenderer } from '../../../model/page-renderer.model';\r\n\r\nclass Header implements PageRenderer {\r\n  public navList: string[] = [\r\n    'shuffle and start',\r\n    'stop',\r\n    'save',\r\n    'results',\r\n  ];\r\n\r\n  render(): Promise<string> {\r\n\r\n    const view =  /*html*/`\r\n          <ul class=\"header-list\">\r\n            ${this.createNav(this.navList)}\r\n          </ul>\r\n          <div class=\"header-burger\">\r\n            <div class=\"header-burger__line\"></div>\r\n            <div class=\"header-burger__line\"></div>\r\n            <div class=\"header-burger__line\"></div>\r\n          </div>\r\n        `\r\n    return Promise.resolve(view);\r\n  }\r\n\r\n  after_render(): Promise<void> {\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  createNav(navList: string[]): string {\r\n    return navList.reduce((nav, item) => {\r\n      const vuew = `\r\n      <li class=\"header-list__item setting-button\"\r\n      data-type=\"${item.split(' ').pop()}\";\r\n        data-type=\"${item}\">\r\n          ${item}\r\n      </li>`;\r\n      return nav + vuew;\r\n    }, ``);\r\n  }\r\n\r\n}\r\n\r\nexport { Header };","import { PageRenderer } from '../../../model/page-renderer.model';\r\nimport { timer } from '../../../services/timer';\r\n\r\nclass Main implements PageRenderer {\r\n  public currentBoardSize: number = 4;\r\n  public moves: number = 0;\r\n  public time: string = '00:00';\r\n  public timerView: null | HTMLElement = null;\r\n  public timer: null | NodeJS.Timer = null;\r\n\r\n  public sizeItem: null | NodeListOf<Element> = null;\r\n  public canvas: null | HTMLCanvasElement = null;\r\n  public canvasWrap: null | HTMLElement = null;\r\n  public settingButtons: null | NodeListOf<Element> = null;\r\n\r\n  render(): Promise<string> {\r\n    const view =  /*html*/`\r\n\r\n    <div class=\"main-container\">\r\n      <div class=\"main-container__game-settings\">\r\n      <div class=\"main-container__game-settings__setting\">\r\n        <svg viewBox=\"24 0 16 16\">\r\n          <path d=\"M40,9.5v-3h-1.8l-0.7-1.8l1.3-1.3l-2.1-2.1l-1.3,1.3l-1.9-0.8V0h-3v1.8l-1.8,0.8l-1.3-1.3l-2.1,2.1l1.3,1.3\r\n          l-0.8,1.8H24v3h1.8l0.7,1.8l-1.3,1.3l2.1,2.1l1.3-1.3l1.8,0.7V16h3v-1.8l1.8-0.7l1.3,1.3l2.1-2.1l-1.3-1.3L38,9.6h2V9.5z M32,12\r\n          c-2.2,0-4-1.8-4-4s1.8-4,4-4s4,1.8,4,4S34.2,12,32,12z\"/>\r\n        </svg>\r\n      </div>\r\n        <p>Moves: <span>${this.moves}</span></p>\r\n        <p>Times: <span class=\"timer-view\">${this.time}</span></p>\r\n      </div>\r\n      <div class=\"main-container__canvas-wrap\">\r\n        <canvas class=\"canvas\">\r\n          Браузер не поддерживает  этот элемент\r\n        </canvas>\r\n      </div>\r\n      <div class=\"main-container__board-size\">\r\n        <p>Frame size <span class=\"size-view\">${this.currentBoardSize}x${this.currentBoardSize}</span></p>\r\n      </div>\r\n      <div class=\"main-container__size-settings\">\r\n        <ul class=\"main-container__size-settings__list\">\r\n          ${this.createSizeSettingsList(3, 8)}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    `;\r\n    return Promise.resolve(view);\r\n  }\r\n\r\n  after_render(): Promise<void> {\r\n    this.sizeItem = document.querySelectorAll('.main-container__size-settings__list__item');\r\n    this.canvas = document.querySelector('.canvas');\r\n    this.canvasWrap = document.querySelector('.main-container__canvas-wrap');\r\n    this.settingButtons = document.querySelectorAll('.setting-button');\r\n    this.timerView = document.querySelector('.timer-view');\r\n\r\n\r\n    //const resizeObserver = new ResizeObserver(this.windowOnResize);\r\n\r\n    this.sizeItem.forEach(el => el.addEventListener('click', (e) => this.changeSizeOnClick(e)));\r\n    this.windowOnResize();\r\n    this.settingButtons.forEach(el => el.addEventListener('click', (e) => this.buttonOnClick(e)));\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  createSizeSettingsList(start: number, end: number): string {\r\n    const arr = [...Array(end - start + 1).keys()];\r\n\r\n    return arr.reduce((str, num) => {\r\n      const size = num + start;\r\n      const activeClass = size === this.currentBoardSize ? ' active' : '';\r\n      const vuew = `\r\n      <li\r\n      class=\"main-container__size-settings__list__item${activeClass}\"\r\n      data-size=\"${size}\">\r\n        ${size}x${size}\r\n      </li>`\r\n      return str + vuew;\r\n    },\r\n      ``);\r\n  }\r\n\r\n  drawOnCanvas() {\r\n    const ctx = this.canvas.getContext('2d');\r\n    const wrapWidth = (this.canvasWrap.clientWidth);\r\n    const tileWidth = wrapWidth / this.currentBoardSize;\r\n    const fontSize = tileWidth / 1.5;\r\n\r\n    ctx.font = `${fontSize}px serif`;\r\n    //const text = ctx.measureText(\"foo\");\r\n\r\n    ctx.lineWidth = 4;\r\n\r\n    let tileCount = 0;\r\n    const tileArray = this.createSuffleArr(this.currentBoardSize);\r\n    tileArray.push(0)\r\n\r\n    //рисуем квадраты\r\n    for (let i = 0; i < this.currentBoardSize; i++) {\r\n      for (let j = 0; j < this.currentBoardSize; j++) {\r\n        //ctx.beginPath();\r\n        if (!(i === this.currentBoardSize - 1 && j === this.currentBoardSize - 1)) {\r\n          const x = j * tileWidth; // x coordinate\r\n          const y = i * tileWidth; // y coordinate\r\n\r\n          //stroke\r\n          ctx.strokeStyle = 'white';\r\n          ctx.strokeRect(x, y, tileWidth, tileWidth);\r\n\r\n          //fill\r\n          ctx.fillStyle = 'black';\r\n          ctx.fillRect(x, y, tileWidth, tileWidth);\r\n\r\n          //text\r\n          ctx.textAlign = 'center';\r\n          ctx.fillStyle = 'white';\r\n          ctx.fillText(`${tileArray[tileCount] + 1}`, x + tileWidth / 2, y + fontSize);\r\n          tileCount += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  windowOnResize() {\r\n    this.canvas.setAttribute('width', this.canvasWrap.clientWidth + \"px\");\r\n    this.canvas.setAttribute('height', this.canvasWrap.clientWidth + \"px\");\r\n    this.drawOnCanvas();\r\n  }\r\n\r\n  buttonOnClick(e: Event): void {\r\n    const elem = <HTMLElement>e.target;\r\n    const type = elem.dataset.type;\r\n\r\n    switch (type) {\r\n      case 'start': this.staetGame();\r\n\r\n        break;\r\n      case 'save':\r\n\r\n        break;\r\n      case 'stop':\r\n\r\n        break;\r\n      case 'results':\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  staetGame() {\r\n    this.sizeItem.forEach(el => el.classList.add('blocked'));\r\n    this.timer = timer(this.timerView);\r\n  }\r\n\r\n  changeSizeOnClick(e: Event): void {\r\n    const sizeDesctiption = document.querySelector('.size-view');\r\n    this.sizeItem.forEach(el => el.classList.remove('active'));\r\n\r\n    const elem = <HTMLElement>e.target;\r\n    const size = elem.dataset.size;\r\n    elem.classList.add('active');\r\n    this.currentBoardSize = +size;\r\n    sizeDesctiption.innerHTML = `${this.currentBoardSize}x${this.currentBoardSize}`\r\n    this.windowOnResize();\r\n  }\r\n\r\n  createSuffleArr(num: number): number[] {\r\n    const arr = [...Array(num * num).keys()];\r\n    arr.pop();\r\n    return arr.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n}\r\n\r\nexport { Main };","const timer = (elem: HTMLElement): NodeJS.Timer => {\r\n    let min = 0;\r\n    let sec = 0;\r\n    let hour = 0;\r\n\r\n    const time: NodeJS.Timer = setInterval(() => {\r\n        sec += 1;\r\n        if (sec === 60) {\r\n            min += 1;\r\n            sec = 0;\r\n        }\r\n        if (min === 60) {\r\n            hour += 1;\r\n            min = 0;\r\n        }\r\n\r\n        if (hour === 0) {\r\n            let secView = sec < 10 ? `0${sec}` : sec.toString();\r\n            let minView = min < 10 ? `0${min}` : min.toString();\r\n            elem.innerHTML = `${minView}:${secView}`;\r\n        }\r\n\r\n        if (hour > 0) {\r\n            if (hour < 10) {\r\n                let secView = sec < 10 ? `0${sec}` : sec.toString();\r\n                let minView = min < 10 ? `0${min}` : min.toString();\r\n                let hourView = hour < 10 ? `0${hour}` : hour.toString();\r\n                elem.innerHTML = `${hourView}:${minView}:${secView}`;\r\n            } else {\r\n                elem.innerHTML = 'Time out';\r\n                clearInterval(time);\r\n            }\r\n\r\n        }\r\n    }, 1000);\r\n\r\n    return time;\r\n}\r\n\r\nexport { timer };","import { PageRenderer } from '../../../model/page-renderer.model';\r\n\r\nclass NotFound implements PageRenderer {\r\n    \r\n    render(): Promise<string> {\r\n        const view =  /*html*/`\r\n        <h3 class=\"page-name\"></h3>\r\n        <p>In process...</p>\r\n        `\r\n        return Promise.resolve(view);\r\n    }\r\n\r\n    after_render(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nexport { NotFound };","type Request = {\r\n    resource: string | null;\r\n    id: string | null;\r\n    verb: string | null;\r\n}\r\n\r\nconst Utils = {\r\n    // --------------------------------\r\n    //  Parse a url and break it into resource, id and verb\r\n    // --------------------------------\r\n    parseRequestURL: (): Request => {\r\n\r\n        let url = location.hash.slice(1).toLowerCase() || '/';\r\n        let r = url.split(\"/\")\r\n        let request: Request = {\r\n            resource: null,\r\n            id: null,\r\n            verb: null\r\n        }\r\n\r\n        request.resource = r[1];\r\n        request.id = r[2];\r\n        request.verb = r[3];;\r\n   \r\n        return request;\r\n    }\r\n\r\n    // --------------------------------\r\n    //  Simple sleep implementation\r\n    // --------------------------------\r\n    , sleep: (ms: number): number | PromiseLike<number> => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}\r\n\r\nexport { Utils };"],"names":["headerComponent","navList","render","view","this","createNav","Promise","resolve","after_render","reduce","nav","item","split","pop","mainPage","currentBoardSize","moves","time","timerView","timer","sizeItem","canvas","canvasWrap","settingButtons","createSizeSettingsList","document","querySelectorAll","querySelector","forEach","el","addEventListener","e","changeSizeOnClick","windowOnResize","buttonOnClick","start","end","Array","keys","str","num","size","drawOnCanvas","ctx","getContext","tileWidth","fontSize","font","lineWidth","tileCount","tileArray","createSuffleArr","push","i","j","x","y","strokeStyle","strokeRect","fillStyle","fillRect","textAlign","fillText","setAttribute","clientWidth","target","dataset","type","staetGame","classList","add","elem","min","sec","hour","setInterval","secView","toString","minView","innerHTML","hourView","clearInterval","sizeDesctiption","remove","arr","sort","Math","random","notFoundPage","routes","Map","router","body","header","createElement","content","wrapper","append","request","r","location","hash","slice","toLowerCase","resource","id","verb","Utils","parsedURL","page","has","get","window","console","log"],"sourceRoot":""}